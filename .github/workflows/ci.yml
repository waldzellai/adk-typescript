name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast checks first - fail fast if basic issues exist
  quick-checks:
    name: Quick Checks (Lint & Types)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for changed file detection
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript Type Check
      run: npm run verify:types
      
    - name: ESLint
      run: npm run lint
      
    - name: Detect Changed Files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against base branch
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.ts$' || echo "")
        else
          # For pushes, compare against previous commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '\.ts$' || echo "")
        fi
        
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Count changed files
        if [ -z "$CHANGED_FILES" ]; then
          echo "changed_count=0" >> $GITHUB_OUTPUT
        else
          echo "changed_count=$(echo "$CHANGED_FILES" | wc -l)" >> $GITHUB_OUTPUT
        fi
        
    - name: Display Changed Files
      run: |
        echo "Changed TypeScript files (${{ steps.changed-files.outputs.changed_count }}):"
        echo "${{ steps.changed-files.outputs.changed_files }}"

  # Placeholder/TODO detection - prevents incomplete code from being merged
  quality-gates:
    name: Quality Gates (No Placeholders)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Detect New Placeholders
      run: |
        echo "üîç Checking for new placeholder code..."
        
        # Get the base branch for comparison
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_REF="origin/${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }}
        else
          BASE_REF="HEAD~1"
        fi
        
        # Patterns that indicate placeholder/incomplete code
        PATTERNS=(
          "TODO"
          "FIXME"
          "STUB"
          "PLACEHOLDER"
          "not implemented"
          "not fully implemented"
          "For now"
          "In a real implementation"
          "would require implementing"
          "This is a placeholder"
          "throw new Error.*not implemented"
        )
        
        # Check for new occurrences of these patterns
        NEW_ISSUES=0
        for pattern in "${PATTERNS[@]}"; do
          echo "Checking for new: $pattern"
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_REF HEAD | grep -E '\.(ts|js)$' || echo "")
          
          if [ -n "$CHANGED_FILES" ]; then
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                # Check if this file has new instances of the pattern
                NEW_MATCHES=$(git diff $BASE_REF HEAD -- "$file" | grep "^+" | grep -i "$pattern" || echo "")
                
                if [ -n "$NEW_MATCHES" ]; then
                  echo "‚ùå Found new '$pattern' in $file:"
                  echo "$NEW_MATCHES"
                  NEW_ISSUES=$((NEW_ISSUES + 1))
                fi
              fi
            done
          fi
        done
        
        if [ $NEW_ISSUES -gt 0 ]; then
          echo ""
          echo "‚ùå QUALITY GATE FAILED: Found $NEW_ISSUES new placeholder(s) or incomplete implementation(s)"
          echo ""
          echo "Please complete the implementation before merging."
          echo "If you must add a TODO, explain why in a comment and create a tracking issue."
          exit 1
        else
          echo "‚úÖ No new placeholders detected"
        fi
        
    - name: Check for Empty Functions
      run: |
        echo "üîç Checking for empty function implementations..."
        
        # Find functions that are just empty or return null/undefined
        EMPTY_FUNCS=$(grep -rn --include="*.ts" -E "(function|async.*function|\w+\s*\(.*\)\s*:\s*\w+\s*\{)\s*\}" src/ || echo "")
        
        if [ -n "$EMPTY_FUNCS" ]; then
          echo "‚ö†Ô∏è  Warning: Found potentially empty functions:"
          echo "$EMPTY_FUNCS"
          # Don't fail on this, just warn
        else
          echo "‚úÖ No obviously empty functions found"
        fi

  # Test suite - runs all tests (will optimize later for affected tests only)
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quick-checks  # Only run if quick checks pass
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Tests with Coverage
      run: npm run test:coverage
      
    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7
        
    - name: Check Coverage Thresholds
      run: |
        echo "üìä Coverage report generated"
        # TODO: Add coverage threshold checks here
        # For now, just ensure tests ran

  # Build verification - ensures the package can be built
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Package
      run: npm run build
      
    - name: Verify Build Output
      run: |
        echo "üîç Verifying build output..."
        
        # Check that dist directory was created
        if [ ! -d "dist" ]; then
          echo "‚ùå dist directory not created"
          exit 1
        fi
        
        # Check that index files exist
        if [ ! -f "dist/index.js" ] || [ ! -f "dist/index.d.ts" ]; then
          echo "‚ùå Main entry points not found in dist/"
          exit 1
        fi
        
        echo "‚úÖ Build output verified"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/
        retention-days: 7

  # Final gate - all checks must pass
  all-checks-passed:
    name: All Checks Passed ‚úÖ
    runs-on: ubuntu-latest
    needs: [quick-checks, quality-gates, test, build]
    if: always()
    
    steps:
    - name: Check All Jobs
      run: |
        if [ "${{ needs.quick-checks.result }}" != "success" ] || \
           [ "${{ needs.quality-gates.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ]; then
          echo "‚ùå One or more checks failed"
          exit 1
        fi
        
        echo "‚úÖ All CI checks passed!"
        echo ""
        echo "This PR is ready for review."

