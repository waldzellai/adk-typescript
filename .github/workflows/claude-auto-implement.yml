name: Claude Auto-Implementation

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, labeled]

jobs:
  claude-auto-implement:
    if: |
      (github.event.issue_comment && contains(github.event.comment.body, '@claude')) ||
      (github.event.action == 'labeled' && github.event.label.name == 'claude-implement') ||
      (github.event.action == 'opened' && contains(github.event.issue.body, '@claude'))
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
    - name: Extract Claude Command
      id: extract_command
      run: |
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          COMMENT_BODY="${{ github.event.comment.body }}"
        else
          COMMENT_BODY="${{ github.event.issue.body }}"
        fi
        
        # Extract @claude command
        CLAUDE_CMD=$(echo "$COMMENT_BODY" | grep -o '@claude.*' | head -1)
        echo "claude_command=$CLAUDE_CMD" >> $GITHUB_OUTPUT
        
        # Determine action type
        if echo "$CLAUDE_CMD" | grep -q "implement\|create\|add"; then
          echo "action_type=implement" >> $GITHUB_OUTPUT
        elif echo "$CLAUDE_CMD" | grep -q "fix\|resolve\|debug"; then
          echo "action_type=fix" >> $GITHUB_OUTPUT
        elif echo "$CLAUDE_CMD" | grep -q "analyze\|review\|explain"; then
          echo "action_type=analyze" >> $GITHUB_OUTPUT
        else
          echo "action_type=general" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Claude Environment
      if: steps.extract_command.outputs.claude_command != ''
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      if: steps.extract_command.outputs.claude_command != ''
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      if: steps.extract_command.outputs.claude_command != ''
      run: |
        npm ci
        curl -fsSL https://claude.ai/cli/install.sh | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Execute Claude Implementation
      if: steps.extract_command.outputs.action_type == 'implement'
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        CLAUDE_CMD="${{ steps.extract_command.outputs.claude_command }}"
        
        echo "ü§ñ Claude implementing: $CLAUDE_CMD"
        
        # Create feature branch
        BRANCH_NAME="claude/implement-$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')"
        git checkout -b "$BRANCH_NAME"
        
        # Use Claude to implement the feature
        claude -p "
        You are implementing a feature for the ADK TypeScript project.
        
        Issue Title: $ISSUE_TITLE
        Issue Description: $ISSUE_BODY
        Command: $CLAUDE_CMD
        
        Please:
        1. Analyze the codebase structure
        2. Implement the requested feature following TypeScript best practices
        3. Add appropriate tests
        4. Update documentation if needed
        5. Ensure no breaking changes
        
        Follow the project's coding standards from CLAUDE.md and maintain consistency with existing patterns.
        " --max-turns 5
        
        # Check if changes were made
        if git diff --quiet; then
          echo "No changes made by Claude"
          exit 0
        fi
        
        # Commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Auto-Implementation"
        git add .
        git commit -m "ü§ñ Implement: $ISSUE_TITLE
        
        Automated implementation via Claude Code
        - $CLAUDE_CMD
        
        Issue: #${{ github.event.issue.number }}"
        
        # Push branch
        git push origin "$BRANCH_NAME"
        
        # Create PR
        gh pr create \
          --title "ü§ñ Auto-implement: $ISSUE_TITLE" \
          --body "This PR was automatically created by Claude Code in response to issue #${{ github.event.issue.number }}.
        
        ## Changes Made
        $CLAUDE_CMD
        
        ## Implementation Details
        - Automated implementation following project standards
        - Maintains TypeScript strict mode compliance
        - Includes appropriate tests and documentation
        
        ## Review Checklist
        - [ ] Code follows project conventions
        - [ ] Tests pass
        - [ ] No breaking changes
        - [ ] Documentation updated
        
        **Generated by Claude Code** ü§ñ
        
        Closes #${{ github.event.issue.number }}" \
          --head "$BRANCH_NAME" \
          --base main
          
    - name: Execute Claude Fix
      if: steps.extract_command.outputs.action_type == 'fix'
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        CLAUDE_CMD="${{ steps.extract_command.outputs.claude_command }}"
        
        echo "üîß Claude fixing: $CLAUDE_CMD"
        
        # Create fix branch
        BRANCH_NAME="claude/fix-$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')"
        git checkout -b "$BRANCH_NAME"
        
        # Run current tests to understand failures
        npm test 2>&1 | head -50 > test_output.txt || true
        npm run lint 2>&1 | head -50 > lint_output.txt || true
        
        # Use Claude to fix the issues
        claude -p "
        You are fixing issues in the ADK TypeScript project.
        
        Issue: $ISSUE_TITLE
        Description: $ISSUE_BODY
        Command: $CLAUDE_CMD
        
        Current Test Output:
        $(cat test_output.txt)
        
        Current Lint Output:
        $(cat lint_output.txt)
        
        Please:
        1. Analyze the failing tests and lint errors
        2. Fix the root causes systematically
        3. Ensure all tests pass
        4. Maintain code quality standards
        5. Document any significant changes
        " --max-turns 3
        
        # Verify fixes
        if npm run quality:gate; then
          echo "‚úÖ All quality gates passed after Claude fixes"
        else
          echo "‚ö†Ô∏è Some issues remain, but progress made"
        fi
        
        # Commit if changes made
        if ! git diff --quiet; then
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Auto-Fix"
          git add .
          git commit -m "üîß Fix: $ISSUE_TITLE
          
          Automated fix via Claude Code
          - $CLAUDE_CMD
          
          Issue: #${{ github.event.issue.number }}"
          
          git push origin "$BRANCH_NAME"
          
          # Create PR for fix
          gh pr create \
            --title "üîß Auto-fix: $ISSUE_TITLE" \
            --body "Automated fix for issue #${{ github.event.issue.number }}.
            
            **Fix Applied:** $CLAUDE_CMD
            
            This PR addresses the reported issue using Claude Code analysis and automated remediation.
            
            Closes #${{ github.event.issue.number }}" \
            --head "$BRANCH_NAME" \
            --base main
        fi
        
    - name: Execute Claude Analysis
      if: steps.extract_command.outputs.action_type == 'analyze'
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        CLAUDE_CMD="${{ steps.extract_command.outputs.claude_command }}"
        
        echo "üîç Claude analyzing: $CLAUDE_CMD"
        
        # Use Claude for analysis
        ANALYSIS=$(claude -p "
        You are analyzing the ADK TypeScript project.
        
        Request: $CLAUDE_CMD
        
        Please provide a comprehensive analysis of the codebase, focusing on:
        1. Code quality and architecture
        2. TypeScript usage patterns  
        3. Potential improvements
        4. Security considerations
        5. Performance opportunities
        
        Be specific and actionable in your recommendations.
        " --output-format text)
        
        # Post analysis as comment
        gh issue comment ${{ github.event.issue.number }} --body "## ü§ñ Claude Analysis
        
        $ANALYSIS
        
        ---
        *Generated by Claude Code automation*"
        
    - name: Claude General Response
      if: steps.extract_command.outputs.action_type == 'general'
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        CLAUDE_CMD="${{ steps.extract_command.outputs.claude_command }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        
        echo "üí¨ Claude responding to: $CLAUDE_CMD"
        
        # Generate response
        RESPONSE=$(claude -p "
        You are helping with the ADK TypeScript project.
        
        User Request: $CLAUDE_CMD
        Context: $ISSUE_BODY
        
        Please provide helpful guidance, code examples, or explanations as appropriate.
        Be specific to the ADK TypeScript project context.
        " --output-format text)
        
        # Post response as comment
        gh issue comment ${{ github.event.issue.number }} --body "## ü§ñ Claude Response
        
        $RESPONSE
        
        ---
        *Generated by Claude Code*"